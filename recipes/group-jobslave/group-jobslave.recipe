#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


class GroupJobslave(GroupSetRecipe):
    name = 'group-jobslave'
    version = '8'

    unwantedComponents = ['devel', 'devellib', 'doc', 'build-tree', 'tk', 'test', 'gtk']

    def setup(r):
        r.dumpAll()
        r.makeSearchPath()
        addToMain = []

        ## core troveset common to all appliance outputs
        group = r.mainSearchPath.find(
            # Application
            'jobslave',
            'jobslave-runtime',

            # Application dependencies
            # FIXME: all of these should be implicit dependencies of jobslave
            'amiconfig',
            'anaconda-utils',
            'bitstream-vera-fonts',
            'conary',
            'dosfstools',
            'ethtool',
            'freetype',
            'gnupg2',
            'mtools',
            'netpbm',
            'nfs-utils',
            'screen',
            #'sgmlop',
            'syslinux',
            'tcsh',

            'group-rpm',
            )
        group += group.depsNeeded(r.mainSearchPath)
        group -= group.components(*r.unwantedComponents)
        r.Group(group)

    def getAdditionalSearchPath(r):
        """
        Set a package search path from a plethora of macros. This covers all
        the product components and dependencies that aren't part of the
        platform, e.g. everything except rPA, rPL, and rLS.
        """
        # Place new packages in the correct section, sorted alphabetically.
        packageSearchPath = []
        for macro, packages in [
            ('master_label', [
                'conary',
                'conary-build',
                'conary-repository',
                'jobslave',
                'jobslave-runtime',
                'pyovf',
                'rpath-product-definition',
                'xobj',
                ]),
            ('anaconda_label', ['anaconda-utils']),
            ]:
            label = r.macros.get(macro)
            if label is None and r._lightInstance:
                continue
            packageSearchPath.append(
                ['%s=%s' % (package, label) for package in packages])
        # Hack to deal with @rpl:2-py26 setuptools being in lib64 vs lib thus
        # changing the related python flags
        packageSearchPath.append('python-setuptools=conary.rpath.com@rpl:2-py26')
        return packageSearchPath

    def getAppliancePlatformSearchPath(r):
        return [
            'group-rpath-platform=' + r.macros.platform_label,
            'group-rpath-packages=' + r.macros.get('common_label', 'centos6.rpath.com@rpath:centos-6-common'),
            'group-os=' + r.macros.get('distro_label', 'centos6.rpath.com@rpath:centos-6e'),
            ]

    def makeSearchPath(r):
        troveSets = []
        searchPath = r.getAdditionalSearchPath() + r.getAppliancePlatformSearchPath()
        for specs in searchPath:
            if isinstance(specs, basestring):
                specs = [specs]
            troveSets.append(r.Repository(r.macros.buildlabel, r.flavor).find(*specs))
        r.mainSearchPath = r.SearchPath(*troveSets)
